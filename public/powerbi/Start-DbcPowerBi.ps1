<#
.SYNOPSIS
Launches the included dbadisa Power BI dashboard. **You will need refresh* the Power BI dashboard every time to see the new results.

.DESCRIPTION
Launches the included dbadisa Power BI dashboard. **You will need refresh* the Power BI dashboard every time to see the new results.

.PARAMETER Path
The location of the pbix file. "$script:ModuleRoot\bin\dbadisa.pbix" by default.

.PARAMETER DataSource
The location of the json file "C:\windows\Temp\dbadisa\*.json" by default

.PARAMETER EnableException
By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.
This avoids overwhelming you with "sea of red" exceptions, but is inconvenient because it basically disables advanced scripting.
Using this switch turns this "nice by default" feature off and enables you to catch exceptions with your own try/catch.

.EXAMPLE
Start-DbsPowerBi

Launches PowerBi from "$script:ModuleRoot\bin\dbadisa.pbix" using "C:\windows\Temp\dbadisa\*.json" (generated by Update-DbsPowerBiDataSource) as the datasource.

.EXAMPLE
Start-DbsPowerBi -Path \\nas\projects\dbadisa.pbix

Launches \\nas\projects\dbadisa.pbix using "C:\windows\Temp\dbadisa\*.json" as the datasource

.LINK
https://dbadisa.readthedocs.io/en/latest/functions/Start-DbsPowerBi/

#>
function Start-DbsPowerBi {
    [CmdletBinding()]
    param (
        [string]$Path = "$script:ModuleRoot\bin\dbadisa.pbix",
        [switch]$EnableException
    )

    process {
        if ($IsLinux) {
            Write-PSFMessage "We cannot run this command from linux at the moment" -Level Warning
            Return
        } else {
            if (Test-Path -Path $Path -PathType Container) {
                $Path = "$Path\dbadisa.pbix"
                Write-PSFMessage -Level Output -Message "Path passed in, appending file name to it."
                Write-PSFMessage -Level Output -Message "New path: $path"
            }
            if (-not (Test-Path -Path $Path)) {
                Stop-PSFFunction -Message "$Path does not exist"
                return
            }

            if ($Path -match "Program Files") {
                $newpath = "$script:localapp\dbadisa.pbix"
                #if ((Test-Path -Path $newpath)) { # Would be nice if we could tell if it needed to be replaced or not
                #I suppose we could use dbadisa versioning and wintemp?
                Copy-Item -Path $Path -Destination $newpath -Force -ErrorAction SilentlyContinue
                $Path = $newpath
            }

            try {
                Write-PSFMessage -Level Output -Message "Launching the dbadisa dashboard. This may take a moment."
                Invoke-Item -Path $path
            } catch {
                Stop-PSFFunction -Message "Failure" -ErrorRecord $_
                return
            }
        }
    }
}